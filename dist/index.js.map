{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// Code Written by Milton Amaya - Firstmile 2023\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  console.log('Dimensional Weight Calculator initialized');\n\n  const form = document.querySelector('[fs-element=\"form\"]');\n  const result = document.querySelector('[fs-element=\"result\"]');\n  const poundsCheckbox = document.querySelector('.pounds-checkbox'); // using classname\n  const ouncesCheckbox = document.querySelector('.ounces-checkbox'); // using classname\n\n  if (!form || !result || !poundsCheckbox || !ouncesCheckbox) return;\n\n  // Function to validate and parse input values\n  const parseInputValue = (value) => {\n    const parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? null : parsedValue;\n  };\n\n  // Function to format actual weight based on the unit\n  const formatActualWeight = (weight, isPounds) => {\n    if (isPounds) {\n      return `${Math.round(weight)} lbs`;\n    }\n    return `${Math.round(weight)} oz`;\n  };\n\n  // Function to round to the nearest pound\n  const roundToNearestPound = (weight) => {\n    return Math.round(weight);\n  };\n\n  // Function to round UP to the nearest pound (used for UPS and FedEx billed weight)\n  const roundUpToNearestPound = (weight) => {\n    return Math.ceil(weight);\n  };\n\n  // Function to format dimensional weight\n  const formatDimWeight = (dimWeight, actualWeight, isPounds) => {\n    if (!isPounds && actualWeight < 16) {\n      return 'N/A';\n    }\n    return `${roundToNearestPound(dimWeight)} lbs`;\n  };\n\n  // Function to calculate USPS and Firstmile billed weight\n  const calculateUSPSFirstmileBilledWeight = (cubicSize, actualWeight, dimWeight) => {\n    if (cubicSize > 1728) {\n      return Math.max(actualWeight, dimWeight);\n    }\n    return actualWeight;\n  };\n\n  // Function to calculate UPS and FedEx billed weight (rounded up)\n  const calculateUPSFedExBilledWeight = (actualWeight, dimWeight) => {\n    return roundUpToNearestPound(Math.max(actualWeight, dimWeight));\n  };\n\n  // Function to determine if pounds or ounces are selected\n  const getWeightUnit = () => {\n    if (poundsCheckbox.checked) {\n      return 'lbs';\n    }\n    if (ouncesCheckbox.checked) {\n      return 'oz';\n    }\n    return null;\n  };\n\n  // Event listener for form submission\n  form.addEventListener('submit', (e) => {\n    // Prevent Form Submission\n    e.preventDefault();\n    // Prevent Webflow JavaScript from doing anything else\n    e.stopPropagation();\n\n    // Get data from the form\n    const formData = new FormData(form);\n    const length = parseInputValue(formData.get('length'));\n    const width = parseInputValue(formData.get('width'));\n    const height = parseInputValue(formData.get('height'));\n    const actualWeightInput = parseInputValue(formData.get('actual-weight'));\n\n    // Determine whether the weight is in pounds or ounces based on the checkboxes\n    const weightUnit = getWeightUnit();\n\n    if (!weightUnit) {\n      result.textContent = 'Please select either pounds or ounces for the actual weight.';\n      console.log('Error: Invalid weight unit selection. Please choose pounds or ounces.');\n      return;\n    }\n\n    const isPounds = weightUnit === 'lbs';\n\n    // Validation for length, width, height, and weight\n    if (length === null || width === null || height === null || actualWeightInput === null) {\n      result.textContent =\n        'Please provide valid inputs for length, width, height, and actual weight.';\n      console.log('Error: Invalid input values.');\n      return;\n    }\n\n    // Validation check: length must be greater than or equal to both height and width\n    if (length < width || length < height) {\n      result.textContent = 'Error: Length must be greater than or equal to both height and width.';\n      console.error(\n        'Validation Error: Length must be greater than or equal to both height and width.'\n      );\n      return;\n    }\n\n    // Calculating cubic size\n    const cubicSize = length * width * height;\n\n    // Calculating dimensional weight for different carriers\n    const dimWeightUPS = cubicSize / 139;\n    const dimWeightFedEx = cubicSize / 139;\n    const dimWeightFirstmile = cubicSize / 166;\n    const dimWeightUSPS = cubicSize / 166;\n\n    // Calculate billed weights for USPS, Firstmile, UPS, and FedEx\n    const billedWeightUSPS = calculateUSPSFirstmileBilledWeight(\n      cubicSize,\n      actualWeightInput,\n      dimWeightUSPS\n    );\n    const billedWeightFirstmile = calculateUSPSFirstmileBilledWeight(\n      cubicSize,\n      actualWeightInput,\n      dimWeightFirstmile\n    );\n    const billedWeightUPS = calculateUPSFedExBilledWeight(actualWeightInput, dimWeightUPS);\n    const billedWeightFedEx = calculateUPSFedExBilledWeight(actualWeightInput, dimWeightFedEx);\n\n    // Output a simple result message\n    result.textContent = 'Dimensional Weight has been calculated on the table.';\n\n    // Update the table with the actual weight, dimensional weight, and billed weight for each carrier\n    document.querySelector('#actual-weight-ups').textContent = formatActualWeight(\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#dim-weight-ups').textContent = formatDimWeight(\n      dimWeightUPS,\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#billed-weight-ups').textContent = formatActualWeight(\n      billedWeightUPS,\n      isPounds\n    );\n\n    document.querySelector('#actual-weight-fedex').textContent = formatActualWeight(\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#dim-weight-fedex').textContent = formatDimWeight(\n      dimWeightFedEx,\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#billed-weight-fedex').textContent = formatActualWeight(\n      billedWeightFedEx,\n      isPounds\n    );\n\n    document.querySelector('#actual-weight-firstmile').textContent = formatActualWeight(\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#dim-weight-firstmile').textContent = formatDimWeight(\n      dimWeightFirstmile,\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#billed-weight-firstmile').textContent = formatActualWeight(\n      billedWeightFirstmile,\n      isPounds\n    );\n\n    document.querySelector('#actual-weight-usps').textContent = formatActualWeight(\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#dim-weight-usps').textContent = formatDimWeight(\n      dimWeightUSPS,\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#billed-weight-usps').textContent = formatActualWeight(\n      billedWeightUSPS,\n      isPounds\n    );\n\n    console.log(`Cubic Size: ${cubicSize}`);\n    console.log(`Dimensional Weight (UPS): ${roundToNearestPound(dimWeightUPS)} lbs`);\n    console.log(`Dimensional Weight (FedEx): ${roundToNearestPound(dimWeightFedEx)} lbs`);\n    console.log(\n      `Dimensional Weight (Firstmile/USPS): ${roundToNearestPound(dimWeightFirstmile)} lbs`\n    );\n    console.log(`Billed Weight (USPS): ${billedWeightUSPS} lbs`);\n    console.log(`Billed Weight (Firstmile): ${billedWeightFirstmile} lbs`);\n    console.log(`Billed Weight (UPS): ${billedWeightUPS} lbs`);\n    console.log(`Billed Weight (FedEx): ${billedWeightFedEx} lbs`);\n  });\n\n  // Function to update the display values in real-time\n  const updateDisplay = () => {\n    const lengthInput = document.querySelector('input[name=\"length\"]');\n    const widthInput = document.querySelector('input[name=\"width\"]');\n    const heightInput = document.querySelector('input[name=\"height\"]');\n    const actualWeightInput = document.querySelector('input[name=\"actual-weight\"]');\n\n    const lengthDisplay = document.querySelector('#length-display');\n    const widthDisplay = document.querySelector('#width-display');\n    const heightDisplay = document.querySelector('#height-display');\n    const actualWeightDisplay = document.querySelector('#actual-weight-display');\n\n    lengthDisplay.textContent = lengthInput.value || '0';\n    widthDisplay.textContent = widthInput.value || '0';\n    heightDisplay.textContent = heightInput.value || '0';\n    actualWeightDisplay.textContent = actualWeightInput.value || '0';\n\n    // Determine whether the weight is in pounds or ounces based on the checkboxes\n    const weightUnit = getWeightUnit();\n    if (!weightUnit) {\n      document.querySelector('#billed-weight-usps').textContent = 'Please select lbs or oz.';\n      return;\n    }\n\n    const isPounds = weightUnit === 'lbs';\n\n    // Update the actual weight for each carrier in real-time\n    const actualWeight = parseInputValue(actualWeightInput.value);\n    if (actualWeight !== null) {\n      const formattedActualWeight = formatActualWeight(actualWeight, isPounds);\n      document.querySelector('#actual-weight-ups').textContent = formattedActualWeight;\n      document.querySelector('#actual-weight-fedex').textContent = formattedActualWeight;\n      document.querySelector('#actual-weight-firstmile').textContent = formattedActualWeight;\n      document.querySelector('#actual-weight-usps').textContent = formattedActualWeight;\n\n      // Calculate and update billed weights in real-time\n      const length = parseInputValue(lengthInput.value);\n      const width = parseInputValue(widthInput.value);\n      const height = parseInputValue(heightInput.value);\n      if (length !== null && width !== null && height !== null) {\n        const cubicSize = length * width * height;\n        const dimWeightUPS = cubicSize / 139;\n        const dimWeightFedEx = cubicSize / 139;\n        const dimWeightFirstmile = cubicSize / 166;\n        const dimWeightUSPS = cubicSize / 166;\n\n        const billedWeightUSPS = calculateUSPSFirstmileBilledWeight(\n          cubicSize,\n          actualWeight,\n          dimWeightUSPS\n        );\n        const billedWeightFirstmile = calculateUSPSFirstmileBilledWeight(\n          cubicSize,\n          actualWeight,\n          dimWeightFirstmile\n        );\n        const billedWeightUPS = calculateUPSFedExBilledWeight(actualWeight, dimWeightUPS);\n        const billedWeightFedEx = calculateUPSFedExBilledWeight(actualWeight, dimWeightFedEx);\n\n        document.querySelector('#billed-weight-usps').textContent = formatActualWeight(\n          billedWeightUSPS,\n          isPounds\n        );\n        document.querySelector('#billed-weight-firstmile').textContent = formatActualWeight(\n          billedWeightFirstmile,\n          isPounds\n        );\n        document.querySelector('#billed-weight-ups').textContent = formatActualWeight(\n          billedWeightUPS,\n          isPounds\n        );\n        document.querySelector('#billed-weight-fedex').textContent = formatActualWeight(\n          billedWeightFedEx,\n          isPounds\n        );\n      }\n    } else {\n      document.querySelector('#actual-weight-ups').textContent = '0';\n      document.querySelector('#actual-weight-fedex').textContent = '0';\n      document.querySelector('#actual-weight-firstmile').textContent = '0';\n      document.querySelector('#actual-weight-usps').textContent = '0';\n      document.querySelector('#billed-weight-usps').textContent = '0';\n      document.querySelector('#billed-weight-firstmile').textContent = '0';\n      document.querySelector('#billed-weight-ups').textContent = '0';\n      document.querySelector('#billed-weight-fedex').textContent = '0';\n      console.log('Error: Invalid actual weight input.');\n    }\n  };\n\n  // Add event listeners to update the display as the user types\n  document.querySelector('input[name=\"length\"]').addEventListener('input', updateDisplay);\n  document.querySelector('input[name=\"width\"]').addEventListener('input', updateDisplay);\n  document.querySelector('input[name=\"height\"]').addEventListener('input', updateDisplay);\n  document.querySelector('input[name=\"actual-weight\"]').addEventListener('input', updateDisplay);\n});\n"],
  "mappings": "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",
  "names": []
}
