{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// Code Written by Milton Amaya - Firstmile 2024\ninterface Window {\n  Webflow: any; // Declare Webflow on the window object\n}\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  console.log('Dimensional Weight Calculator initialized');\n\n  const form = document.querySelector('[fs-element=\"form\"]') as HTMLFormElement;\n  const result = document.querySelector('[fs-element=\"result\"]');\n  const poundsCheckbox = document.querySelector('.pounds-checkbox') as HTMLInputElement;\n  const ouncesCheckbox = document.querySelector('.ounces-checkbox') as HTMLInputElement;\n\n  if (!form || !result || !poundsCheckbox || !ouncesCheckbox) return;\n\n  // Function to validate and parse input values\n  const parseInputValue = (value: string | null): number | null => {\n    const parsedValue = parseFloat(value || '');\n    return isNaN(parsedValue) ? null : parsedValue;\n  };\n\n  // Function to format actual weight based on the unit\n  const formatActualWeight = (weight: number, isPounds: boolean): string => {\n    return isPounds ? `${Math.round(weight)} lbs` : `${Math.round(weight)} oz`;\n  };\n\n  // Function to round to the nearest pound\n  const roundToNearestPound = (weight: number): number => Math.round(weight);\n\n  // Function to round UP to the nearest pound (used for UPS and FedEx billed weight)\n  const roundUpToNearestPound = (weight: number): number => Math.ceil(weight);\n\n  // Function to determine if pounds or ounces are selected\n  const getWeightUnit = (): 'lbs' | 'oz' | null => {\n    if (poundsCheckbox.checked) return 'lbs';\n    if (ouncesCheckbox.checked) return 'oz';\n    return null;\n  };\n\n  // Function to calculate billed weight for USPS and FM (uses actual weight when ounces are selected)\n  const calculateUSPSFirstmileBilledWeight = (actualWeight: number, isOunces: boolean): number => {\n    if (isOunces) {\n      console.log(`FM/USPS Billed Weight (Ounces Mode): Actual Weight = ${actualWeight} oz`);\n      return actualWeight; // Use actual weight when ounces are selected for USPS and Firstmile\n    }\n    return actualWeight; // Default behavior if not ounces (use actual weight in this case)\n  };\n\n  // Function to calculate UPS and FedEx billed weight (uses greater of actual vs dim)\n  const calculateUPSFedExBilledWeight = (\n    actualWeight: number,\n    dimWeight: number,\n    isOunces: boolean\n  ): number => {\n    if (isOunces) {\n      actualWeight = actualWeight / 16; // Convert ounces to pounds\n      console.log(`UPS/FedEx Billed Weight (Ounces Mode): Actual Weight = ${actualWeight} lbs`);\n    }\n    return roundUpToNearestPound(Math.max(actualWeight, dimWeight));\n  };\n\n  // Event listener for form submission\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const formData = new FormData(form);\n    const length = parseInputValue(formData.get('length') as string);\n    const width = parseInputValue(formData.get('width') as string);\n    const height = parseInputValue(formData.get('height') as string);\n    const actualWeightInput = parseInputValue(formData.get('actual-weight') as string);\n\n    const weightUnit = getWeightUnit();\n\n    if (!weightUnit) {\n      result.textContent = 'Please select either pounds or ounces for the actual weight.';\n      console.log('Error: Invalid weight unit selection. Please choose pounds or ounces.');\n      return;\n    }\n\n    const isPounds = weightUnit === 'lbs';\n    const isOunces = weightUnit === 'oz';\n\n    if (length === null || width === null || height === null || actualWeightInput === null) {\n      result.textContent =\n        'Please provide valid inputs for length, width, height, and actual weight.';\n      console.log('Error: Invalid input values.');\n      return;\n    }\n\n    if (length < width || length < height) {\n      result.textContent = 'Error: Length must be greater than or equal to both height and width.';\n      console.error(\n        'Validation Error: Length must be greater than or equal to both height and width.'\n      );\n      return;\n    }\n\n    const cubicSize = length * width * height;\n\n    const dimWeightUPS = cubicSize / 139;\n    const dimWeightFedEx = cubicSize / 139;\n\n    const billedWeightUSPS = calculateUSPSFirstmileBilledWeight(actualWeightInput, isOunces);\n    const billedWeightFirstmile = calculateUSPSFirstmileBilledWeight(actualWeightInput, isOunces);\n    const billedWeightUPS = calculateUPSFedExBilledWeight(\n      actualWeightInput,\n      dimWeightUPS,\n      isOunces\n    );\n    const billedWeightFedEx = calculateUPSFedExBilledWeight(\n      actualWeightInput,\n      dimWeightFedEx,\n      isOunces\n    );\n\n    result.textContent = 'Dimensional Weight has been calculated on the table.';\n\n    document.querySelector('#actual-weight-ups')!.textContent = formatActualWeight(\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#dim-weight-ups')!.textContent =\n      `${roundToNearestPound(dimWeightUPS)} lbs`;\n    document.querySelector('#billed-weight-ups')!.textContent = formatActualWeight(\n      billedWeightUPS,\n      isPounds\n    );\n\n    document.querySelector('#actual-weight-fedex')!.textContent = formatActualWeight(\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#dim-weight-fedex')!.textContent =\n      `${roundToNearestPound(dimWeightFedEx)} lbs`;\n    document.querySelector('#billed-weight-fedex')!.textContent = formatActualWeight(\n      billedWeightFedEx,\n      isPounds\n    );\n\n    document.querySelector('#actual-weight-firstmile')!.textContent = formatActualWeight(\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#dim-weight-firstmile')!.textContent = 'N/A'; // FM doesn't need dim weight in ounces mode\n    document.querySelector('#billed-weight-firstmile')!.textContent = formatActualWeight(\n      billedWeightFirstmile,\n      isPounds\n    );\n\n    document.querySelector('#actual-weight-usps')!.textContent = formatActualWeight(\n      actualWeightInput,\n      isPounds\n    );\n    document.querySelector('#dim-weight-usps')!.textContent = 'N/A'; // USPS doesn't need dim weight in ounces mode\n    document.querySelector('#billed-weight-usps')!.textContent = formatActualWeight(\n      billedWeightUSPS,\n      isPounds\n    );\n\n    console.log(`Cubic Size: ${cubicSize}`);\n    console.log(`Dimensional Weight (UPS): ${roundToNearestPound(dimWeightUPS)} lbs`);\n    console.log(`Dimensional Weight (FedEx): ${roundToNearestPound(dimWeightFedEx)} lbs`);\n    console.log(`Billed Weight (USPS): ${billedWeightUSPS} oz`);\n    console.log(`Billed Weight (Firstmile): ${billedWeightFirstmile} oz`);\n    console.log(`Billed Weight (UPS): ${billedWeightUPS} lbs`);\n    console.log(`Billed Weight (FedEx): ${billedWeightFedEx} lbs`);\n  });\n\n  const updateDisplay = () => {\n    const lengthInput = document.querySelector('input[name=\"length\"]') as HTMLInputElement;\n    const widthInput = document.querySelector('input[name=\"width\"]') as HTMLInputElement;\n    const heightInput = document.querySelector('input[name=\"height\"]') as HTMLInputElement;\n    const actualWeightInput = document.querySelector(\n      'input[name=\"actual-weight\"]'\n    ) as HTMLInputElement;\n\n    const lengthDisplay = document.querySelector('#length-display');\n    const widthDisplay = document.querySelector('#width-display');\n    const heightDisplay = document.querySelector('#height-display');\n    const actualWeightDisplay = document.querySelector('#actual-weight-display');\n\n    lengthDisplay!.textContent = lengthInput.value || '0';\n    widthDisplay!.textContent = widthInput.value || '0';\n    heightDisplay!.textContent = heightInput.value || '0';\n    actualWeightDisplay!.textContent = actualWeightInput.value || '0';\n\n    const weightUnit = getWeightUnit();\n    if (!weightUnit) {\n      document.querySelector('#billed-weight-usps')!.textContent = 'Please select lbs or oz.';\n      return;\n    }\n\n    const isPounds = weightUnit === 'lbs';\n    const isOunces = weightUnit === 'oz';\n\n    const actualWeight = parseInputValue(actualWeightInput.value);\n    if (actualWeight !== null) {\n      const formattedActualWeight = formatActualWeight(actualWeight, isPounds);\n      document.querySelector('#actual-weight-ups')!.textContent = formattedActualWeight;\n      document.querySelector('#actual-weight-fedex')!.textContent = formattedActualWeight;\n      document.querySelector('#actual-weight-firstmile')!.textContent = formattedActualWeight;\n      document.querySelector('#actual-weight-usps')!.textContent = formattedActualWeight;\n\n      const length = parseInputValue(lengthInput.value);\n      const width = parseInputValue(widthInput.value);\n      const height = parseInputValue(heightInput.value);\n      if (length !== null && width !== null && height !== null) {\n        const cubicSize = length * width * height;\n        const dimWeightUPS = cubicSize / 139;\n        const dimWeightFedEx = cubicSize / 139;\n\n        const billedWeightUSPS = calculateUSPSFirstmileBilledWeight(actualWeight, isOunces);\n        const billedWeightFirstmile = calculateUSPSFirstmileBilledWeight(actualWeight, isOunces);\n        const billedWeightUPS = calculateUPSFedExBilledWeight(actualWeight, dimWeightUPS, isOunces);\n        const billedWeightFedEx = calculateUPSFedExBilledWeight(\n          actualWeight,\n          dimWeightFedEx,\n          isOunces\n        );\n\n        document.querySelector('#billed-weight-usps')!.textContent = formatActualWeight(\n          billedWeightUSPS,\n          isPounds\n        );\n        document.querySelector('#billed-weight-firstmile')!.textContent = formatActualWeight(\n          billedWeightFirstmile,\n          isPounds\n        );\n        document.querySelector('#billed-weight-ups')!.textContent = formatActualWeight(\n          billedWeightUPS,\n          isPounds\n        );\n        document.querySelector('#billed-weight-fedex')!.textContent = formatActualWeight(\n          billedWeightFedEx,\n          isPounds\n        );\n      }\n    } else {\n      document.querySelector('#actual-weight-ups')!.textContent = '0';\n      document.querySelector('#actual-weight-fedex')!.textContent = '0';\n      document.querySelector('#actual-weight-firstmile')!.textContent = '0';\n      document.querySelector('#actual-weight-usps')!.textContent = '0';\n      document.querySelector('#billed-weight-usps')!.textContent = '0';\n      document.querySelector('#billed-weight-firstmile')!.textContent = '0';\n      document.querySelector('#billed-weight-ups')!.textContent = '0';\n      document.querySelector('#billed-weight-fedex')!.textContent = '0';\n      console.log('Error: Invalid actual weight input.');\n    }\n  };\n\n  document.querySelector('input[name=\"length\"]')!.addEventListener('input', updateDisplay);\n  document.querySelector('input[name=\"width\"]')!.addEventListener('input', updateDisplay);\n  document.querySelector('input[name=\"height\"]')!.addEventListener('input', updateDisplay);\n  document.querySelector('input[name=\"actual-weight\"]')!.addEventListener('input', updateDisplay);\n});\n"],
  "mappings": "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",
  "names": []
}
